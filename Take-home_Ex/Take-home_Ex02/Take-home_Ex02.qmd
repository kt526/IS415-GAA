---
title: "Take-home Exercise 2: Application of Spatial and Spatio-temporal Analysis Methods to Discover the Distribution of Dengue Fever in Tainan City, Taiwan"
execute:
  eval: true
  echo: true
  warning: false
date: 03/01/2024
toc-depth: 3
code-annotations: hover
---

# 1.0 Introduction

## 1.1. Overview - Setting the Scene

[Dengue Hemorrhagic Fever](https://www.cdc.gov/dengue/resources/denguedhf-information-for-health-care-practitioners_2009.pdf) (in short dengue fever) is one of the most widespread mosquito-borne diseases in the most tropical and subtropical regions. It is an acute disease caused by dengue virus infection which is transmitted by female Aedes aegypti and Aedes albopictus mosquitoes. In 2015, Taiwan had recorded the most severe dengue fever outbreak with more than 43,000 dengue cases and 228 deaths. Since then, the annual reported dengue fever cases were maintained at the level of not more than 200 cases. However, in 2023, Taiwan recorded 26703 dengue fever cases.

## 1.2 Objectives

In this study, we are interested to discover:

-   If the distribution of dengue fever outbreak at Tainan City, Taiwan are independent from space and space and time.

-   If the outbreak is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.

## 1.3 Getting Started

In this take-home exercise, we will be using the following packages.

```{r}
pacman::p_load(tidyverse, tmap, sf, sp, sfdep)
```

# 2.0 Data Acquisition

We will be using **2 data sets** in this exercise:

+---------------------+----------------+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+
| Data                | Format         | Description                                                    | Source                                                                                               |
+=====================+================+================================================================+======================================================================================================+
| TAIWAN_VILLAGE_2020 | ESRI Shapefile | A geospatial data of village boundary of Taiwan                | [data.gov.tw](https://data.gov.tw/en/datasets/130549)                                                |
+---------------------+----------------+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+
| Dengue_Daily.csv    | csv            | An aspatial data of reported dengue cases in Taiwan since 1998 | [Taiwan CDC Open Data Portal](https://data.cdc.gov.tw/en/dataset/dengue-daily-determined-cases-1998) |
+---------------------+----------------+----------------------------------------------------------------+------------------------------------------------------------------------------------------------------+

Create a new folder labelled `Take-home_Ex02` and place all the files into this folder.

# 3.0 Importing Geospatial and Aspatial Data

## 3.1 Importing Geospatial data

**TAIWAN_VILLAGE_2020**

The TAIWAN_VILLAGE_2020 dataset was acquired in ESRI shapefile format (.shp). To utilise this dataset in the R-environment, we need to import it as an sf object using the st_read() function from the sf package. This function is used to read the shapefile containing the administrative boundaries of Tainan City and returns an sf object named `tainan_sf`.

```{r}
tainan_sf <- st_read(dsn = "data/geospatial", 
                layer = "TAINAN_VILLAGE")
```

## 3.2 Importing Aspatial data

**Dengue_Daily**

The Dengue_Daily dataset is available in csv format (.csv) and was obtained from the Taiwan CDC Open Data Portal. Like the previous dataset, it needs to be imported into the R environment for use. However, since this dataset is aspatial and in csv format, a different method is required for reading it. We will utilize the read_csv() function to import the csv dataset and store the object in a tibble data frame named `dengue`.

```{r}
dengue <- read_csv("data/aspatial/Dengue_Daily.csv")
head(dengue)
```

# 4.0 Data Wrangling

## 4.1 Preparing a study area layer with specific counties of Tainan City, Taiwan

**Task:** Confining study area layer to D01, D02, D04, D06, D07, D08, D32 and D39 counties

In this Take-home Exercise, we are interested in narrowing our focus to specific counties within Tainan City, specifically **D01, D02, D04, D06, D07, D08, D32, and D39**. To prepare a study area layer focusing on these specific counties, we can do the following:

```{r}
counties <- c('D01', 'D02', 'D04', 'D06', 'D07', 'D08', 'D32', 'D39')
tainan_counties_sf <- tainan_sf %>%
  select(COUNTYNAME,
         TOWNID,
         TOWNNAME,
         VILLNAME,
         geometry) %>%
  mutate(TOWNNAME_VILLNAME = paste(TOWNNAME, VILLNAME, sep="_")) %>%
  filter(TOWNID %in% counties)
```

::: callout-note
## Notes

The c() function is used to combine the specified counties into a vector (a one dimensional array) named counties. Next, we will filter the Tainan City spatial data frame (`tainan_sf`) based on the `TOWNID` column, selecting only those entries that match the counties of interest listed in the counties vector. This refined dataset, named `tainan_counties_sf`, will serve as our study area layer for further analysis or visualization tasks.
:::

Note: Check that `tainan_counties_sf` only contains polygon features.

```{r}
#| echo: false
tmap_mode("plot")

tm_shape(tainan_counties_sf) + 
  tm_polygons("TOWNID")
```

## 4.2 Preparing a dengue fever layer with specific counties of Tainan City, Taiwan

**Tasks:**

1.  Extracting dengue fever cases within epidemiology week 31-50, 2023
2.  Confining dengue fever layer to D01, D02, D04, D06, D07, D08, D32 and D39 counties

### 4.2.1 Extracting dengue fever cases within epidemiology week 31-50, 2023

```{r}
dengue_2023 <- dengue %>%
  select(發病日,
         最小統計區中心點X,
         最小統計區中心點Y,
         居住縣市,
         居住鄉鎮,
         居住村里) %>% 
  mutate(EPIWEEK = epiweek(發病日),
         TOWNNAME_VILLNAME = paste(居住鄉鎮, 居住村里, sep="_")) %>%
  filter(year(發病日) == 2023 & 居住村里 != "None") %>%
  rename("ONSET_DATE" = 發病日,
         "X_COORDINATE" = 最小統計區中心點X,
         "Y_COORDINATE" = 最小統計區中心點Y,
         "COUNTYNAME" = 居住縣市,
         "TOWNNAME" = 居住鄉鎮,
         "VILLNAME" = 居住村里)
```

Visualizing the distribution of dengue fever cases across the epidemiology weeks

```{r}
ggplot(dengue_2023, aes(x = EPIWEEK)) +
  geom_histogram(binwidth = 1, color = "grey") +
  labs(x = "EPIWEEK", y = "count") +
  ggtitle("Distribution of Dengue Cases in 2023 by Epidemiology weeks") +
  theme_minimal()
```

**More than 80%** of the reported dengue fever cases occurred in **epidemiology week 31-50, 2023**.

```{r}
dengue_2023_epiweeks_31_50_df <- dengue_2023 %>%
  filter(between(EPIWEEK, 31, 50) )

unique(dengue_2023_epiweeks_31_50_df$EPIWEEK)
```

### 4.2.2 Confining dengue fever layer to D01, D02, D04, D06, D07, D08, D32 and D39 counties

```{r}
dengue_fever_layer_df <- dengue_2023_epiweeks_31_50_df %>%
  select(ONSET_DATE,
         X_COORDINATE,
         Y_COORDINATE,
         COUNTYNAME,
         TOWNNAME,
         VILLNAME,
         EPIWEEK) %>% 
  mutate(TOWNNAME_VILLNAME = paste(TOWNNAME, VILLNAME, sep="_")) %>%
  filter(COUNTYNAME == "台南市" & TOWNNAME %in% c("安南區", "仁德區", "中西區",
          "南區", "永康區", "東區", "北區", "安平區"))
```

## 4.3 Preparing a dengue fever layer in spacetime d3 class of sfdep

```{r}
dengue_grp <- dengue_fever_layer_df %>%
  filter(VILLNAME != "None") %>% 
  group_by(TOWNNAME_VILLNAME, EPIWEEK) %>%
  summarise(num_dengue_cases = n()) %>% 
  complete(EPIWEEK = 31:50, fill = list(num_dengue_cases = 0))
```

```{r}
tainan_counties_with_dengue <- tainan_counties_sf %>% 
  mutate(TOWNNAME_VILLNAME = paste(TOWNNAME, VILLNAME, sep="_")) %>%
  select(TOWNNAME_VILLNAME, geometry) %>%
  filter(TOWNNAME_VILLNAME %in% unique(dengue_grp$TOWNNAME_VILLNAME))
```

```{r}
tainan_dengue_st <- spacetime(.data = dengue_grp,
                              .geometry = tainan_counties_with_dengue,
                              .loc_col = "TOWNNAME_VILLNAME",
                              .time_col = "EPIWEEK")
```

```{r}
is_spacetime_cube(tainan_dengue_st)
```

::: callout-note
## Note

The **`TRUE`** return confirms that `tainan_dengue_st` is indeed an time-space cube.
:::

## 4.4 Preparing for Exploratory Data Analysis

```{r}
total_dengue_cases_by_village <- dengue_grp %>%
  select(TOWNNAME_VILLNAME,
         num_dengue_cases) %>%
  group_by(TOWNNAME_VILLNAME) %>%
  summarise(total_dengue_cases = sum(num_dengue_cases))
```

```{r}
tainan_dengue_cases_by_village <- left_join(tainan_counties_sf,
                                            total_dengue_cases_by_village,
                                            by = "TOWNNAME_VILLNAME") %>% 
  replace_na(list(total_dengue_cases = 0))
```

```{r}
which(colSums(is.na(tainan_dengue_cases_by_village))>0)
```

# 5.0 Geospatial Analysis

## 5.1 Visualising the distribution of dengue fever cases

```{r}
tmap_mode("plot")
tm_shape(tainan_dengue_cases_by_village) +
  tm_fill("total_dengue_cases",
          style = "jenks",
          palette = "Reds",
          title = "Number of Dengue Cases",
          legend.show = TRUE,
          popup.vars = c("total_dengue_cases")) +
  tm_layout(main.title = "Distribution of Total Dengue Cases in Tainan",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.5,
            legend.width = 0.4,
            frame = TRUE) +
  tm_borders(alpha = 0.8) +
  tm_compass(type="8star", size = 1.5) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

```{r}
equal <- tm_shape(tainan_dengue_cases_by_village) +
  tm_fill("total_dengue_cases",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(tainan_dengue_cases_by_village) +
  tm_fill("total_dengue_cases",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## 5.2 Spatial Autocorrelation Analysis

> “Everything is related to everything else, but near things are more related than distant things.”
>
> -- Waldo Tobler, The First Law of Geography

**Spatial Autocorrelation** is used to describe the presence of systematic spatial variation in a variable.

The two main types of Spatial Autocorrelation Analysis are:

-   Global spatial autocorrelation analysis

-   Local spatial autocorrelation analysis

### 5.2.1 Global Spatial Autocorrelation Analysis

#### 5.2.1.1 Measures of Global of Spatial Autocorrelation: Moran’s I and Geary’s C

We can test the presence of spatial autocorrelation using the Moran’s I or Geary's C.

+----------------------------------------------------------------------------+--------------------------------------------------------------------------+
| Moran’s I                                                                  | Geary’s C                                                                |
+============================================================================+==========================================================================+
| ![](imgs/global_moran_i.png)                                               | ![](imgs/global_geary_c.png)                                             |
+----------------------------------------------------------------------------+--------------------------------------------------------------------------+
| Describe how features differ from the values in the study area as a whole. | Describing how features differ from their immediate neighbours.          |
|                                                                            |                                                                          |
| Interpreting the Z value using Moran’s I:                                  | Interpreting the Z value using Geary's c:                                |
|                                                                            |                                                                          |
| -   positive (I\>0): Clustered, observations tend to be similar;           | -   Large c value (\>1) : Dispersed, observations tend to be dissimilar; |
|                                                                            |                                                                          |
| -   negative(I\<0): Dispersed, observations tend to be dissimilar;         | -   Small c value (\<1) : Clustered, observations tend to be similar;    |
|                                                                            |                                                                          |
| -   approximately zero: observations are arranged randomly over space.     | -   c = 1: observations are arranged randomly over space.                |
+----------------------------------------------------------------------------+--------------------------------------------------------------------------+

In this Take-home Exercise, we use Moran’s I to test the spatial autocorrelation. To test for spatial autocorrelation, we can follow the steps below:

1.  State the null and alternative hypotheses
2.  Choose the significance level ⍺
    -   Statistically, we select the confident interval such as 95% =\> alpha value = 0.05.
3.  Calculate the test statistic
4.  State the conclusion
    -   Reject the Null hypothesis (H0) if p-value is smaller than alpha value.
    -   Failed to reject the Null Hypothesis (H0) if p-value is greater than alpha value.

#### 5.2.1.2 Compute Spatial Weights

To calculate global spatial autocorrelation statistics effectively, we need to first construct the spatial weights for the study area. The spatial weights play a critical role in defining the neighbourhood relationships between geographical units within the study area.

There are several methods to construct spatial weights. We will be using the Contiguity-Based method to construct the spatial weights and derive the Weights Matrix.

**Contiguity-Based Weights**

This method establishes neighbourhood relationships based on contiguity, where geographical units sharing common borders (boundaries) are considered neighbours. Contiguity can be further categorised into the following cases:

![](imgs/contiguity-based_criterions.png){fig-align="center"}

-   "rook" contiguity (sharing a common edge)

-   “bishop” contiguity, (sharing common vertices)

-   "queen" contiguity (sharing a common edge or vertex)

::: callout-note
## Note

“rook" and "queen" contiguity are more commonly used. Therefore, the number of neighbours according to the queen criterion will always be at least as large as for the rook criterion.
:::

To derive the **Contiguity-Based Weights,**

```{r}
wm_q <- tainan_dengue_cases_by_village %>%
  mutate(nb = st_contiguity(geometry, queen=TRUE),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)

glimpse(wm_q)
```

#### 5.2.1.3 Compute Global Moran's I

We will compute the global moran’s I value using the global_moran() function. The output is a tibble data.frame.

```{r}
moranI <- global_moran(wm_q$total_dengue_cases,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

#### 5.2.1.4 Perform Global Moran's I Test

In order to perform the Global Moran’s I Test, we will be using the global_moran_test() function from sfdep package.

```{r}
global_moran_test(wm_q$total_dengue_cases,
                       wm_q$nb,
                       wm_q$wt)
```

::: callout-note
## Interpreting the results
:::

#### 5.2.1.5 Perform Global Moran's I Permutation Test with Monte-Carlo Simulation

In practice, monte carlo simulation should be used to perform the statistical test. We can use the global_moran_perm() function of sfdep package to run the monte carlo simulation.

::: callout-note
## Note

The set.seed() function in R is used to create reproducible results when writing code that involves creating variables that take on random values. The value placed in the seed can be any random integer. By using the set.seed() function, you guarantee that the same random values are produced each time you run the code. Read more about setting seeds [here](https://www.statology.org/set-seed-in-r/).
:::

```{r}
set.seed(1234)
global_moranI_perm <- global_moran_perm(wm_q$total_dengue_cases,
                       wm_q$nb,
                       wm_q$wt,
                       nsim = 99)

global_moranI_perm
```

::: callout-important
The number of simulations is always equal to nsim + 1. Since nsim = 99, this means that we will be performing 100 simulations.
:::

**Interpreting the results**

#### 5.2.1.6 Visualising Global Monte-Carlo Moran's I

Let us visualise the simulated Moran’s I test statistics by plotting the distribution of the statistical values using a histogram.

```{r}
hist(global_moranI_perm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

We can also look at the summary statistics using the summary() function.

```{r}
summary(global_moranI_perm$res[1:99])
```

### 5.2.2 Local Spatial Autocorrelation Analysis

#### 5.2.2.1 Computing Local Moran's I and p-value

We will compute the local moran’s I value using the local_moran() function. The output is a sf data.frame.

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    total_dengue_cases, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

#### 5.2.2.2 Visualizing local Moran’s I and p-value

The tmap functions are used to prepare a choropleth map by using values in the `ii` and `p_ii_sim` fields.

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Local Moran's I",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

#### 5.2.2.3 Visualize the Local Indicator of Spatial Association (LISA) map

The LISA map is a categorical map showing outliers and clusters. LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p-values. There are two types of outliers namely: High-Low and Low-High outliers. Likewise, there are two types of clusters namely: High-High and Low-Low clusters.

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii < 0.05)

tmap_mode("plot")
tainan_counties_map <- tm_shape(tainan_counties_sf) + 
  tm_polygons("TOWNID")

lisa_map <- tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)

tmap_arrange(tainan_counties_map, lisa_map, ncol = 2)
```

**Interpreting the results**

## 5.3 Emerging **H**otSpot Analysis (EHSA)

```{r}

```
