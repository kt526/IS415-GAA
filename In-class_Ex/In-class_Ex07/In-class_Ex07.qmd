---
title: "In-class Exercise 7: Geographic Segmentation with Spatially Constrained Cluster Analysis: sfdep methods"
format: html
execute:
  eval: true
  echo: true
  warning: false
date: 03/04/2024
code-annotations: hover
---

**Installing and loading R packages**

```{r}
pacman::p_load(sp, spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

::: callout-note
## Note

-   We remove rgdal because it is no longer in CRAN

-   Loading tidyverse allows us to use other packages such as ggplot, dplyr, tidyr
:::

**Data import and preparation**

We will be using 2 datasets in this exercise:

-   Myanmar Township Boundary Data (geometric file)

-   Shan-ICT.csv (attribute file)

```{r}
#| eval: false
shan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "myanmar_township_boundaries") %>% 
  filter(ST %in% c("Shan (East)", "Shan (North)", "Shan (South)")) %>%
  select(c(2:7))
```

Filter: To only include Shan states

Select: To select only relevant fields

Note: **Geodetic CRS: WGS 84**, we do not have to be particular about the projection here because we are building graphs

```{r}
ict <- read_csv("data/aspatial/Shan-ICT.csv")
```

```{r}
summary(ict)
```

Notice that the range of each variable varies. We need to perform standardisation.

```{r}
ict_derived <- ict %>%
  mutate(`RADIO_PR` = `Radio`/`Total households`*1000,
         `TV_PR` = `Television`/`Total households`*1000,
         `LLPHONE_PR` = `Land line phone`/`Total households`*1000,
         `MPHONE_PR` = `Mobile phone`/`Total households`*1000,
         `COMPUTER_PR` = `Computer`/`Total households`*1000,
         `INTERNET_PR` = `Internet at home`/`Total households`*1000) %>% 
  rename(`DT_PCODE` =`District Pcode`,`DT`=`District Name`,
         `TS_PCODE`=`Township Pcode`, `TS`=`Township Name`,
         `TT_HOUSEHOLDS`=`Total households`,
         `RADIO`=`Radio`, `TV`=`Television`, 
         `LLPHONE`=`Land line phone`, `MPHONE`=`Mobile phone`,
         `COMPUTER`=`Computer`, `INTERNET`=`Internet at home`) 
```

**Preparing the data for choropleth map**

```{r}
#| eval: false
shan_sf <- left_join(shan_sf, 
                     ict_derived, by=c("TS_PCODE"="TS_PCODE"))
  
write_rds(shan_sf, "data/rds/shan_sf.rds")
```

::: callout-note
## Note

-   If we want the output to be a sf data frame, the first argument should be a sf data frame.

-   If we use st_join(), but arguments must be sf data frames.
:::

**Reading in data from rds**

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
```

**Plotting Multiple Histograms**

```{r}
radio <- ggplot(data=ict_derived, 
             aes(x= `RADIO_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

tv <- ggplot(data=ict_derived, 
             aes(x= `TV_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

llphone <- ggplot(data=ict_derived, 
             aes(x= `LLPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

mphone <- ggplot(data=ict_derived, 
             aes(x= `MPHONE_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

computer <- ggplot(data=ict_derived, 
             aes(x= `COMPUTER_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

internet <- ggplot(data=ict_derived, 
             aes(x= `INTERNET_PR`)) +
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue")

ggarrange(radio, tv, llphone, mphone, computer, internet, 
          ncol = 3, 
          nrow = 2)
```

**Correlation Analysis**

To check if the input variables are highly correlated.

```{r}
cluster_vars.cor = cor(ict_derived[,12:17])
corrplot.mixed(cluster_vars.cor,
         lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

**Interpreting the corrplot**

1.  Size of Ellipse
    1.  Narrow means highly correlated
2.  Color
    1.  Red denotes negative correlation
    2.  Blue denotes positive correlation

**Extracting clustering variables**

```{r}
cluster_vars <- shan_sf %>%
  st_set_geometry(NULL) %>%
  select("TS.x", "RADIO_PR", "TV_PR", "LLPHONE_PR", "MPHONE_PR", "COMPUTER_PR")
head(cluster_vars,10)
```

st_set_geometry = dropping away the geometric columns

Note: even if you don't select the geometry column, the geometry layer will still be read in

The current row names in `cluster_vars` are labelled as 1, 2, 3 ... We need to set the row names as the township name using row.names() function.

```{r}
row.names(cluster_vars) <- cluster_vars$"TS.x"
head(cluster_vars,10)
```

Notice that the row number has been replaced into the township name.

```{r}
shan_ict <- select(cluster_vars, c(2:6))
head(shan_ict, 10)
```

```{r}
#| eval: false
write_rds(shan_ict, "data/rds/shan_ict.rds")
```

**Computing the proximity matrix**

```{r}
shan_ict <- read_rds("data/rds/shan_ict.rds")
proxmat <- dist(shan_ict, method = 'euclidean')
```

**Interpreting dendrogram**

Optimal number of clusters are based on local optimization

**Computing hierarchical clustering**

```{r}
hclust_ward <- hclust(proxmat, method = 'ward.D')
plot(hclust_ward, cex = 0.6)
```

Notes:

-   as.factor = changing a data type from numerical data type into a factor data type

-   cbind() denotes column append: Used instead because there is no unique identifiers between `shan_sf` and `groups`.

-   If the data has been sorted, we should not use cbind() because the sequence of data would have changed.

**SKATER approach using sfdep**

This code chunk below will be redundant when we are using sfdep

```{r}
#| eval: false
shan_sp <- as_Spatial(shan_sf)
```

```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

```{r}
plot(shan_sf,
     border=grey(.5))
```

```{r}
plot(st_geometry(shan_sf),
     border=grey(.5))
```

Note that if we are using spdep, we can use the coordinates() function. But if we are using sfdep, we need to derive the centroids of each polygon.

```{r}
pts <- st_coordinates(st_centroid(shan_sf))
plot(st_geometry(shan_sf),
     border=grey(.5))
plot(shan.nb,
     pts,
     col="blue",
     add=TRUE)
```

**Cluster analysis**

-   Looking at the distribution of clusters based on map

-   Dissecting cluster membership (to label the clusters) (we need to characterize the clusters based on interpreting the parallel coordinates plots)
