---
title: "Spatial Weights and Applications"
execute:
  warning: false
date: 01/24/2024
date-modified: last-modified
code-annotations: hover
---

# 1.0 Introduction

## 1.1 Getting Started

In this hands-on exercise, we will be using the following packages:

-   knitr

-   sf

-   spdep

-   tidyverse

-   tmap

```{r}
pacman::p_load(knitr, sf, spdep, tidyverse, tmap)
```

# 2.0 Data Acquisition

We will be using 2 datasets in this exercise:

-   Hunan county boundary layer

-   Hunan_2012.csv

# 3.0 Geospatial Data Handling

We will be using the *st_read()* from **sf** package to import the data into RStudio.

## 3.1 Importing Geospatial Data

### 3.1.1 Importing Geospatial Data in shapefile format

```{r}
hunan_sf <- st_read(dsn = "data/geospatial", 
                   layer = "Hunan")
```

The message above reveals that the geospatial objects are polygon features. There are a total of 88 polygon features and 7 fields in `hunan_sf`. `hunan_sf` is in **WGS 84** geographic coordinates systems. The bounding box provides the x extend and y extend of the data.

## 3.2 Importing Aspatial Data

### 3.2.1 Importing Aspatial Data in csv format

Since `Hunan_2012.csv` is in csv file format, we will use *read_csv()* of **readr** package to import it.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 3.3 Data Preparation

```{r}
hunan_joined <- left_join(hunan_sf, hunan2012 )%>%
  select(1:4, 7, 15)
```

# 4.0 Geospatial Visualization – Basemap and Choropleth Maps

We are now going to prepare a basemap and a choropleth map, showing the distribution of GDPPC 2012 by using *qtm()* of **tmap** package.

```{r}
basemap <- tm_shape(hunan_joined) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan_joined, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## 4.1 Computing Contiguity Spatial Weights

In this section, we will be utilizing the *poly2nb()* from **spdep** package to calculate contiguity weight matrices within the study area. This function generates a list of neighbors by considering regions with shared boundaries.

> Note: The "queen" argument from *poly2nb()* is set to TRUE as default. If this argument is not given, the default value will be used and a list of first-order neighbors based on the Queen criteria will be provided.

### 4.1.1 Computing (QUEEN) contiguity based neighbours

```{r}
wm_q <- poly2nb(hunan_joined, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 regions (area units) in Hunan. The most connected region has 11 neighbours. There are two area units with only one neighbour.

For each polygon in our polygon object, *wm_q* lists all the neighboring polygons. Let’s see the neighbors for the first polygon:

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors, with each number representing the polygon IDs as stored in our hunan SpatialPolygonsDataFrame class. Let’s try retrieving the county name of Polygon ID=1:

```{r}
hunan_joined$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

We can also retrieve the county names of the five neighboring polygons:

```{r}
hunan_joined$NAME_3[c(2,3,4,57,85)]
```

To find out the GDPPC of the five neighboring polygons, we can do the following:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_joined$GDPPC[nb1]
nb1
```

The printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.

Lastly, we can display the complete weight matrix using *str()*:

```{r}
str(wm_q)
```

::: callout-warning
The output might span across several pages.
:::

### 4.1.2 Creating (ROOK) contiguity based neighbours

```{r}
wm_r <- poly2nb(hunan_joined, queen=FALSE)    # <1>
summary(wm_r)
```

1.  We mentioned previously that the default queen argument is set to `TRUE`. If we set the queen argument to `FALSE`, we will be computing the contiguity based neighbours using the **rook** criteria.

The summary report above shows that there are 88 regions (area units) in Hunan. The most connected region has 10 neighbours. There are two area units with only one neighbour.

## 4.2 Visualising contiguity weights

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan_joined$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan_joined$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

### 4.2.1 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan_joined$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### 4.2.2 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan_joined$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "orange")
```

### 4.2.3 Plotting Rook contiguity based neighbours map

```{r}
par(mfrow = c(1,2))
plot(hunan_joined$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col="red")
plot(hunan_joined$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col="orange")
```

## 4.3 Computing distance based neighbours

In this section, we will learn how to derive distance-based weight matrices by using *dnearneigh()* of **spdep** package.

The function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

### 4.3.1 Determine the cut-off distance

Firstly, we need to determine the upper limit for distance band. To do so, we will follow the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### 4.3.2 Computing fixed distance weight

Now, we will compute the distance weight matrix by using *dnearneigh()* as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

> **Quiz: What is the meaning of “Average number of links: 3.681818” shown above?**

Next, we will use *str()* to display the content of `wm_d62` weight matrix.

```{r}
str(wm_d62)
```

Alternatively, we can display the weight matrix in another structure by combining *table()* and *card()* of **spdep** package.

```{r}
table(hunan_joined$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

#### 4.3.2.1 Plotting fixed distance weight matrix

```{r}
plot(hunan_joined$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

Alternatively, we can plot both of them next to each other.

```{r}
par(mfrow=c(1,2))
plot(hunan_joined$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan_joined$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### 4.3.3 Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry .

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

To display the contents of the matrix, we use *str()*:

```{r}
str(knn6)
```

Notice that each county has **six** neighbours, no less no more!

#### 4.3.3.1 Plotting fixed distance weight matrix

```{r}
plot(hunan_joined$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## 4.4 Weights based on IDW

In this section, we will learn how to derive a spatial weight matrix based on **Inversed Distance method**.

First, we will compute the distances between areas by using *nbdists()* of **spdep** package.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.

While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon’s eight neighbors:

```{r}
rswm_q$weights[10]
```

Each neighbor is assigned a **0.125** of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.

Using the same method, we can also derive a **row standardised distance weight matrix**.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## 4.5 Application of Spatial Weight Matrix

There are four different spatial lagged variables we will be going through in this section, they are:

-   spatial lag with row-standardized weights,

-   spatial lag as a sum of neighbouring values,

-   spatial window average, and

-   spatial window sum

### 4.5.1 Spatial lag with row-standardized weights

Firstly, we will compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan_joined$GDPPC)
GDPPC.lag
```

Recalled in the previous section, we retrieved the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan_joined$GDPPC[nb1]
nb1
```

> **Question: Can you see the meaning of Spatial lag with row-standardized weights now?**

We can append the spatially lag GDPPC values onto `hunan_joined` data frame and display a table to show the average neighboring income values (stored in the Inc.lag object) for each county.

```{r}
lag.list <- list(hunan_joined$NAME_3, lag.listw(rswm_q, hunan_joined$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan_joined <- left_join(hunan_joined,lag.res)
head(hunan_joined)
```

```{r}
gdppc <- qtm(hunan_joined, "GDPPC")
lag_gdppc <- qtm(hunan_joined, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### 4.5.2 Spatial lag as a sum of neighboring values

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use *lag.listw()* to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan_joined$NAME_3, lag.listw(b_weights2, hunan_joined$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

Let's examine the results

```{r}
lag_sum
```

Next, we will append the lag_sum GDPPC field into `hunan_joined` data frame and plot both the GDPPC and Spatial Lag Sum GDPPC for comparison.

```{r}
hunan_joined <- left_join(hunan_joined, lag.res)
gdppc <- qtm(hunan_joined, "GDPPC")
lag_sum_gdppc <- qtm(hunan_joined, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 4.5.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element. 

```{r}
wm_qs <- include.self(wm_q)
```

Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909

Let's take a good look at the neighbour list of area \[1\].

```{r}
wm_qs[[1]]
```

Notice that now \[1\] has **six** neighbours instead of five.

Now we obtain weights with *nb2listw()*

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs,
                             hunan_joined$GDPPC)
lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()*.

```{r}
lag.list.wm_qs <- list(hunan_joined$NAME_3, lag.listw(wm_qs, hunan_joined$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan_joined <- left_join(hunan_joined, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of Knitr package is used to prepare a table using the code chunk below.

```{r}
hunan_joined %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly,*qtm()* of **tmap** package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan_joined, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### 4.5.4 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights.

To add the diagonal element to the neighbour list, we just need to use *include.self()* from **spdep**.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Next, we will assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

Notice that now \[1\] has six neighbours instead of five.

Again, we use *nb2listw()* and *glist()* to explicitly assign weight values.

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

With our new weight structure, we can compute the lag variable with *lag.listw()*.

```{r}
w_sum_gdppc <- list(hunan_joined$NAME_3, lag.listw(b_weights2, hunan_joined$GDPPC))
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using *as.data.frame()* and append w_sum GDPPC values onto `hunan_joined` data.frame by using *left_join()* of **dplyr** package.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")    # <1>
hunan_joined <- left_join(hunan_joined, w_sum_gdppc.res)
```

1.  This line renames the field names of `w_sum_gdppc.re` object into `NAME_3` and `w_sum GDPPC` respectively

To compare the values of lag GDPPC and Spatial window average, *kable()* of Knitr package is used to prepare a table.

```{r}
hunan_joined %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, *qtm()* of **tmap** package is used to plot the `lag_sum GDPPC` and `w_sum_gdppc` maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan_joined, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```
