---
title: "Hands-on Exercise 1: Geospatial Data Handling and Wrangling with R"
execute:
  warning: false
date: "`r Sys.Date()`"
---

# 1.0 Getting Started

In this hands-on exercise, we will be using tidyverse and sf

-   **tidyverse**: Performing data science tasks such as importing, wrangling and visualising data

-   **sf**: Importing, managing and processing geospatial data

```{r}
pacman::p_load(tidyverse, sf)
```

# 2.0 Importing a Geospatial data in shapefile format

In this section, we will learn how to import the following geospatial data into R by using st_read() of **sf** package:

-   MP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format

-   CyclingPath, a line feature layer in ESRI shapefile format

-   PreSchool, a point feature layer in kml file format

## 2.1 Importing polygon feature data in shapefile format

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

## 2.2 Importing polyline feature data in shapefile form

```{r}
cyclingpath <- st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

## 2.3 Importing GIS data in kml format

```{r}
preschool <- st_read("data/geospatial/PreSchoolsLocation.kml")
```

# 3.0 Checking the Content of A Simple Feature Data Frame

In this sub-section, we will learn different ways to retrieve information related to the content of a simple feature data frame.

## 3.1 Working with st_geometry()

```{r}
st_geometry(mpsz)
```

## 3.2 Working with glimpse()

```{r}
glimpse(mpsz)
```

## 3.3 Working with head()

```{r}
head(mpsz, n=5)
```

# 4.0 Plotting the Geospatial Data

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

# 5.0 Working with Projection

## 5.1 Assigning EPSG code to a simple feature data frame

```{r}
st_crs(mpsz)
```

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

```{r}
st_crs(mpsz3414)
```

## 5.2 Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
```

# 6.0 Importing and Converting An Aspatial Data

## 6.1 Importing the aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

```{r}
list(listings)
```

## 6.2 **Creating a simple feature data rom an aspatial data frame**

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf)
```

# 7.0 Geoprocessing with sf package

## 7.1 Buffering

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

```{r}
sum(buffer_cycling$AREA)
```

## 7.2 Point-in-polygon count

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
summary(mpsz3414$`PreSch Count`)
```

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# 8.0 Exploratory Data Analysis (EDA)

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
