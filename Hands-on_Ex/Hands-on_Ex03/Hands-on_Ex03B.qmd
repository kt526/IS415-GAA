---
title: "Hands-on Exercise 3B: Network Constrained Spatial Point Patterns Analysis"
execute:
  warning: false
date: 01/24/2024
date-modified: last-modified
code-annotations: hover
---

# 1.0 Introduction

**Network constrained Spatial Point Patterns Analysis (NetSPAA)** is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre The network, on the other hand, can be a road network or river network.

## 1.1 Getting Started

In this hands-on exercise, we will be using the following packages:

-   rgdal

-   sp

-   spNetwork

-   tmap

**rgdal** is retired and binary is removed from CRAN. However, we can download from [Posit Public Package Manager](#0) snapshots.

```{r}
#| eval: false
install.packages("rgdal", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

```{r}
pacman::p_load(sp, sf, rgdal, spNetwork, tmap)
```

# 2.0 Data Acquisition

In this study, we will analyse the spatial distribution of childcare centre in [Punggol planning area](https://en.wikipedia.org/wiki/Punggol). For the purpose of this study, two geospatial data sets will be used. They are:

-   *Punggol_St*, a line features geospatial data which store the road network within Punggol Planning Area.

-   *Punggol_CC*, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.

Both data sets are in ESRI shapefile format.

# 3.0 Geospatial Data Handling

## 3.1 Importing Geospatial Data

We will read in the geospatial data sets using the *st_read()* of **sf** package and display the structure of the sf data frames using *str()* of **utils** package.

### 3.1.1 Punggol_St

::: panel-tabset
## Reading file using st_read()

```{r}
network <- st_read(dsn="data/geospatial",
                   layer="Punggol_St")
```

## Displaying file structure using str()

```{r}
str(network)
```
:::

### 3.1.2 Punggol_CC

::: panel-tabset
## Reading file using st_read()

```{r}
childcare <- st_read(dsn="data/geospatial",
                   layer="Punggol_CC")
```

## Displaying file structure using str()

```{r}
str(childcare)
```
:::

```{r}

```

# 4.0 Geospatial Visualization

There are at least two ways to visualise the geospatial data - *plot()* of **R Base** package or methods from the **tmap** package.

::: panel-tabset
## R Base package

```{r}
plot(network)
plot(childcare,add=T,col='red',pch = 19)
```

## tmap package

```{r}
tmap_mode('view')
tm_shape(childcare) + 
  tm_dots() + 
  tm_shape(network) +
  tm_lines()
tmap_mode('plot')
```
:::

# 5.0 Network Constrained KDE (NetKDE) Analysis

In this section, we will perform NetKDE analysis by using appropriate functions provided in **spNetwork** package.

## 5.1. Preparing the lixels objects

Before computing NetKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with *lixelize_lines()* of spNetwork

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 350)
```

After cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. If NULL, then mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified

## 5.2 Generating line centre points

Next, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e.samples) with line centre points.

```{r}
samples <- lines_center(lixels)
```

The points are located at center of the line based on the length of the line.

## 5.3 Performing NetKDE

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1,nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, #we aggregate events within a 5m radius (faster calculation)
                  sparse = TRUE,
                  verbose = FALSE)
```

## 5.4 Visualizing NetKDE

Before we can visualise the NetKDE values, we will need to insert the computed density values (i.e. densities) into `samples` and `lixels` objects as `density` field.

```{r}
samples$density <- densities
lixels$density <- densities
```

Since **SVY21** projection system is in **meters**, the computed density values are very small i.e 0.0000005. We need to rescale the density values from number of events per meters to number of events per kilometers.

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

And finally, we can start plotting!

We will use functions from **tmap** package to prepare interactive and high cartographic quality map visualization.

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
```

```{r}
tmap_mode('plot')
```

## 5.5 Network Constrained G- and K-Function Analysis

In this section, we are going to perform complete spatial randomness (CSR) test by using *kfunctions()* of **spNetwork** package.

To get started, let’s formulate our test hypothesis and state the confidence interval we are using:

-   ***H~0~*** = The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

The output of *kfunctions()* is a list with the following values:

-   *plotkA*, a ggplot2 object representing the values of the k-function

-   *plotgA*, a ggplot2 object representing the values of the g-function

-   *valuesA*, a DataFrame with the values used to build the plots

We can visualise the ggplot2 object of k-function in the following manner:

```{r}
kfun_childcare$plotk
```

The blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m.
